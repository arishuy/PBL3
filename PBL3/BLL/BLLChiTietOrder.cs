using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PBL3.DTO;

namespace PBL3.BLL
{
    public class BLLChiTietOrder
    {
        QLCHTAN db;
        private static BLLChiTietOrder _Instance;

        public static BLLChiTietOrder Instance
        {
            get
            {
                if (_Instance == null)
                {
                    _Instance = new BLLChiTietOrder();
                }
                return _Instance;
            }
            private set { }
        }
        private BLLChiTietOrder()
        {
            db = new QLCHTAN();
        }
        public bool checkAddUpdate(string id)
        {
            bool Add = true;
            try
            {
                if (db.ChiTietOrder.Find(id) != null)
                {
                    Add = false;
                }
            }
            catch (Exception ex) { Console.WriteLine(ex.Message); }
            return Add;
        }

        public bool Delete(string id)
        {
            try
            {
                db.ChiTietOrder.Remove(db.ChiTietOrder.Find(id));
                db.SaveChanges();
                return true;
            }
            catch (Exception ex) { Console.WriteLine(ex.Message); }
            return false;
        }
        public string AutoGeneratedId()
        {
            string id_next = "";
            try
            {
                string id_max = db.ChiTietOrder.Select(p => p.id_ChiTietOrder).ToList().Max();
                if (id_max == null)
                {
                    id_next = "CT000001";
                }
                else
                {
                    int max = Convert.ToInt32(id_max.Substring(id_max.Length - 6));
                    max++;
                    id_next = "CT" + ("000000" + max).Substring(("000000" + max).Length - 6);
                }
            }
            catch (Exception ex) { Console.WriteLine(ex.Message); }
            return id_next;
        }
        public bool ExecuteAddUpdate(ChiTietOrder t)
        {
            try
            {
                if (checkAddUpdate(t.id_Order))
                {
                    db.ChiTietOrder.Add(new ChiTietOrder
                    {
                        id_ChiTietOrder = AutoGeneratedId(),
                        id_Order = t.id_Order,
                        id_MonAn = t.id_MonAn,
                        SoLuong = t.SoLuong,
                        GiaNhap = t.GiaNhap,
                        GiaBan = t.GiaBan,
                    });
                    db.SaveChanges();
                }
                else
                {
                    ChiTietOrder ct = db.ChiTietOrder.Find(t.id_ChiTietOrder);
                    ct.id_Order = t.id_Order;
                    ct.id_MonAn = t.id_MonAn;
                    ct.SoLuong = t.SoLuong;
                    ct.GiaNhap = t.GiaNhap;
                    ct.GiaBan = t.GiaBan;
                    db.SaveChanges();
                }
                return true;
            }
            catch (Exception ex) { Console.WriteLine(ex.Message); }
            return false;
        }

        public List<ChiTietOrder> GetAll()
        {
            List<ChiTietOrder> list = new List<ChiTietOrder>();
            try
            {
                list = db.ChiTietOrder.Select(p => p).ToList();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            return list;
        }

        public ChiTietOrder GetById(string id)
        {
            ChiTietOrder t = new ChiTietOrder();
            try
            {
                t = db.ChiTietOrder.Find(id);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            return t;
        }
        public List<ChiTietOrder_View> GetByIdOrder(string id_Order)
        {
            List<ChiTietOrder_View> list = new List<ChiTietOrder_View>();
            try
            {
                list = db.ChiTietOrder.Where(p => p.id_Order == id_Order)
                        .Select(p => new ChiTietOrder_View
                        {
                            TenMonAn = p.MonAn.TenMonAn,
                            SoLuong = p.SoLuong,
                            GiaBan = p.GiaBan,
                            ThanhTien = p.GiaBan * p.SoLuong
                        })
                        .ToList();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            };
            return list;
        }
        public void ExecuteListOrder(string id_Order, List<ChiTietOrder> chiTiets)
        {
            try
            {
                foreach (ChiTietOrder chiTiet in chiTiets)
                {
                    ExecuteAddUpdate(new ChiTietOrder
                    {
                        id_Order = id_Order,
                        id_MonAn = chiTiet.id_MonAn,
                        SoLuong = chiTiet.SoLuong,
                        GiaNhap = chiTiet.GiaNhap,
                        GiaBan = chiTiet.GiaBan
                    });
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
    }
}
