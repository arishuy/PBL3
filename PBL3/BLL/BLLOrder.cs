using PBL3.DTO;
using System;
using System.Linq;

namespace PBL3.BLL
{
    public class BLLOrder
    {
        QLCHTAN db = new QLCHTAN();
        private static BLLOrder _Instance;

        public static BLLOrder Instance
        {
            get
            {
                if (_Instance == null)
                {
                    _Instance = new BLLOrder();
                }
                return _Instance;
            }
            private set { }
        }
        private BLLOrder()
        {

        }
        public bool checkAddUpdate(string id)
        {
            bool Add = true;
            try
            {
                if (db.Order.Find(id) != null)
                {
                    Add = false;
                }
            }
            catch (Exception ex) { Console.WriteLine(ex.Message); }
            return Add;
        }

        public bool Delete(string id)
        {
            try
            {
                db.Order.Remove(db.Order.Find(id));
                db.SaveChanges();
                return true;
            }
            catch (Exception ex) { Console.WriteLine(ex.Message); }
            return false;
        }
        public string AutoGeneratedId()
        {
            string id_next = "";
            try
            {
                string id_max = db.Order.Select(p => p.id_Order).ToList().Max();
                if (id_max == null)
                {
                    id_next = "OD001";
                }
                else
                {
                    int max = Convert.ToInt32(id_max.Substring(id_max.Length - 3));
                    max++;
                    id_next = "OD" + ("000" + max).Substring(("000" + max).Length - 3);
                }
            }
            catch (Exception ex) { Console.WriteLine(ex.Message); }
            return id_next;
        }
        public bool ExecuteAddUpdate(Order t)
        {
            try
            {
                if (checkAddUpdate(t.id_Order))
                {
                    db.Order.Add(new Order
                    {
                        id_Order = t.id_Order,
                        id_KhachHang = t.id_KhachHang,
                        id_NhanVien = t.id_NhanVien,
                    });
                    db.SaveChanges();
                }
                else
                {
                    Order od = db.Order.Find(t.id_Order);
                    od.id_KhachHang = t.id_KhachHang;
                    od.id_NhanVien = t.id_NhanVien;
                    db.SaveChanges();
                }
                return true;
            }
            catch (Exception ex) { Console.WriteLine(ex.Message); }
            return false;
        }
        public Order GetById(string id)
        {
            Order order = new Order();
            try
            {
                order = db.Order.Find(id);
            }
            catch (Exception ex) { Console.WriteLine(ex.Message); }
            return order;
        }
        public double GetTongGiaBanByIdOrder(string id_Order)
        {
            double tongGiaBan = 0;
            try
            {
                tongGiaBan = db.ChiTietOrder.Where(ct => ct.id_Order == id_Order).Sum(t => t.GiaBan * t.SoLuong);
            }
            catch (Exception ex) { Console.WriteLine(ex.Message); }
            return tongGiaBan;
        }
    }
}
